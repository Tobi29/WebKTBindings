/*
 * Copyright 2012-2019 Tobi29
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "kotlin-multiplatform"
apply from: rootProject.file("gradle/publish-maven.gradle")

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin("stdlib-common")
                api project(":binding-utils")
            }
        }
        "jvm-lwjgl3Main" {
            dependencies {
                implementation kotlin("stdlib")
                implementation rootProject.lwjgl("lwjgl")
                implementation rootProject.lwjgl("lwjgl-stb")
            }
        }
        nativeMain {
            dependsOn commonMain
        }
        nativeTest {
            dependsOn commonTest
        }
        configure([nativeLinuxX64Main, nativeLinuxArm32HfpMain,
                nativeLinuxMips32Main, nativeLinuxMipsel32Main,
                nativeAndroidNativeArm32Main, nativeAndroidNativeArm64Main,
                nativeWasm32Main]) {
            dependsOn nativeMain
        }
        configure([nativeLinuxX64Test, nativeLinuxArm32HfpTest,
                nativeLinuxMips32Test, nativeLinuxMipsel32Test,
                nativeAndroidNativeArm32Test, nativeAndroidNativeArm64Test,
                nativeWasm32Test]) {
            dependsOn nativeTest
        }
    }
    targets {
        // Kotlin/JVM (LWJGL 3)
        fromPreset(presets.jvm, "jvm-lwjgl3")

        // Kotlin/Native
        fromPreset(presets.linuxX64, "nativeLinuxX64")
        fromPreset(presets.linuxArm32Hfp, "nativeLinuxArm32Hfp")
        fromPreset(presets.linuxMips32, "nativeLinuxMips32")
        fromPreset(presets.linuxMipsel32, "nativeLinuxMipsel32")
        fromPreset(presets.androidNativeArm32, "nativeAndroidNativeArm32")
        fromPreset(presets.androidNativeArm64, "nativeAndroidNativeArm64")
        fromPreset(presets.wasm32, "nativeWasm32")
        configure([nativeLinuxX64, nativeLinuxArm32Hfp,
                nativeLinuxMips32, nativeLinuxMipsel32,
                nativeAndroidNativeArm32, nativeAndroidNativeArm64,
                nativeWasm32]) {
            compilations.main.cinterops {
                stbttf {
                    packageName "binding.stbttf"
                    includeDirs file("ext/stb")
                }
            }
        }
    }
}
